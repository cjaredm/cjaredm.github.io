{"version":3,"sources":["webpack:///./src/components/Hero.js","webpack:///./src/components/Carousel.js","webpack:///./src/templates/portfolio-item.js"],"names":["Hero","imgUrl","name","content","defaults","img","postImage","childImageSharp","fluid","src","Section","id","className","styled","section","Carousel","items","indexSelected","React","useState","current","setCurrent","displayBtns","length","Wrapper","LBtn","onClick","Container","RBtn","div","button","PortfolioPage","data","item","setModal","title","description","excerpt","screenshots","publicUrl","color","source","map","i","key","url","Images","images","selected","getScreenshotAttrs","alt","style","cursor","pageQuery","Image","size","srcSet","formats"],"mappings":"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","file":"component---src-templates-portfolio-item-js-6cb26af89e0dd398645e.js","sourcesContent":["import React from 'react';\nimport { useStaticQuery } from 'gatsby';\nimport styled from 'styled-components';\n\nconst Hero = ({ imgUrl, name, content }) => {\n  const { defaults } = useStaticQuery(graphql`\n    query {\n      defaults: strapiDefaults {\n        postImage {\n          childImageSharp {\n            fluid {\n              src\n              srcSet\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const img = imgUrl || defaults.postImage.childImageSharp.fluid.src;\n  return (\n    <Section imgUrl={img} id=\"banner\" className={`major`}>\n      <div className=\"inner\">\n        <div className=\"banner-wrapper\">\n          <div>\n            <header className=\"major\">\n              <h1>{name}</h1>\n            </header>\n\n            <div className=\"content\">{content}</div>\n          </div>\n        </div>\n      </div>\n    </Section>\n  );\n};\n\nexport default Hero;\n\nconst Section = styled.section`\n  background: url(${({ imgUrl }) => imgUrl}) no-repeat center center fixed;\n  background-size: cover;\n  min-height: auto !important;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport function Carousel({items, indexSelected = 0}) {\n  const [current, setCurrent] = React.useState(indexSelected);\n  const next = () => current === items.length -1 ? setCurrent(0) : setCurrent(current + 1);\n  const previous = () => current === 0 ? setCurrent(items.length -1) : setCurrent(current - 1);\n  const displayBtns = items.length > 1;\n  return (\n    <Wrapper>\n      {displayBtns && <LBtn onClick={previous}>Prev</LBtn>}\n      <Container>\n      {items[current]}\n      </Container>\n      {displayBtns && <RBtn onClick={next}>Next</RBtn>}\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  position: relative;\n  width: inherit;\n  height: inherit;\n`;\n\nconst Container = styled.div`\n  height: inherit;\n  display: flex;\n  img {\n    max-width: 90%;\n    max-height: 90%;\n    margin: 0 auto;\n    align-self: center;\n  }\n`;\n\nconst LBtn = styled.button`\n  position: absolute;\n  top: 50%;\n  left: 0;\n  transform: translateY(-50%);\n  background-color: white;\n`;\n\nconst RBtn = styled.button`\n  position: absolute;\n  top: 50%;\n  right: 0;\n  transform: translateY(-50%);\n  background-color: white;\n`;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport styled from 'styled-components';\nimport ReactMarkdown from 'react-markdown';\nimport SEO from '../components/seo';\nimport Layout from '../components/layout';\nimport Hero from '../components/Hero';\n// import { TechStack } from '../components/TechStack';\nimport { Carousel } from '../components/Carousel';\n\nfunction PortfolioPage({ data }) {\n  const { item = {} } = data;\n  return (\n    <Layout>\n      {({ setModal }) => (\n        <>\n          <SEO title={`cJaredm - ${item.name}`} description={item.excerpt} />\n\n          <Hero\n            imgUrl={item?.screenshots?.publicUrl}\n            name={item.name}\n            content={item.description}\n          />\n\n          <div id=\"main\" className=\"alt\">\n            <Container id=\"one\">\n              <div className=\"inner\">\n                <header className=\"major\">\n                  <h2>Tech Stack</h2>\n                  {/* {codeLink && <a href={codeLink}>See the code!</a>} */}\n                </header>\n                {/* <TechStack techs={item.techStack} /> */}\n              </div>\n            </Container>\n\n            <Container id=\"two\" color=\"#6fc3df\">\n              <div className=\"inner\">\n                <header className=\"major\">\n                  <h2>What</h2>\n                </header>\n                <ReactMarkdown source={item.description} />\n              </div>\n            </Container>\n\n            {item?.screenshots && (\n              <Container id=\"three\" color=\"#8d82c4\">\n                <div className=\"inner\">\n                  <header className=\"major\">\n                    <h2>Screenshots</h2>\n                  </header>\n\n                  <div className=\"box alt\">\n                    <div className=\"grid-wrapper\">\n                      {item.screenshots.map((img, i) => (\n                        <div className=\"col-4\" key={i + img.url}>\n                          <button\n                            className=\"image fit\"\n                            onClick={() =>\n                              setModal(\n                                <Images\n                                  images={item.screenshots}\n                                  selected={i}\n                                />\n                              )\n                            }\n                          >\n                            <img\n                              {...getScreenshotAttrs(img, 'medium')}\n                              alt=\"screenshot\"\n                              style={{ cursor: 'pointer' }}\n                            />\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </Container>\n            )}\n          </div>\n        </>\n      )}\n    </Layout>\n  );\n}\n\nexport default PortfolioPage;\n\nexport const pageQuery = graphql`\n  query PortfolioItemByRoute($route: String!) {\n    item: strapiPortfolioItem(route: { eq: $route }) {\n      id\n      strapiId\n      featured\n      name\n      excerpt\n      description\n      techStack {\n        name\n        url\n        image {\n          publicURL\n          childImageSharp {\n            fluid {\n              srcSet\n            }\n          }\n        }\n      }\n      screenshots {\n        url\n        formats {\n          small {\n            childImageSharp {\n              fluid {\n                srcSet\n              }\n            }\n          }\n        }\n      }\n      links {\n        name\n        url\n        iconName\n        image {\n          publicURL\n          childImageSharp {\n            fluid {\n              srcSet\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst Container = styled.section`\n  background-color: ${({ color }) => color || 'white'};\n`;\n\nconst Image = styled.img`\n  display: flex;\n`;\n\nfunction Images({ images, selected }) {\n  return (\n    <Carousel\n      indexSelected={selected}\n      items={images.map((img, i) => (\n        <Image\n          {...getScreenshotAttrs(img, 'large')}\n          alt=\"screenshot\"\n          key={i + img.url}\n        />\n      ))}\n    />\n  );\n}\n\nfunction getScreenshotAttrs(img = {}, size = 'medium') {\n  const srcSet = img?.formats?.[size]?.childImageSharp?.fluid?.srcSet;\n  return {\n    src: srcSet ? '' : img?.url,\n    srcSet,\n  };\n}\n"],"sourceRoot":""}