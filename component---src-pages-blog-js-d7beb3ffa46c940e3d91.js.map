{"version":3,"sources":["webpack:///./src/components/seo.js","webpack:///./src/pages/blog.js"],"names":["SEO","description","lang","meta","keywords","title","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","PostsList","posts","defaultImage","PostList","map","post","key","route","strapiId","PostSynopsis","BlogIndex","props","data","siteTitle","siteName","nodes","defaults","postImage","location","className","pageQuery","styled","ul","srcSet","image","childImageSharp","fluid","defaultSrcSet","to","PostCardWrapper","src","alt","Header","date","synopsis","header","div"],"mappings":"6UAYA,SAASA,EAAT,GAA4D,IAA7CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MACxCC,EADiD,OACjDA,KAcFC,EAAkBN,GAAeK,EAAKE,aAAaP,YAEzD,OACE,kBAAC,IAAD,CACEQ,eAAgB,CACdP,QAEFG,MAAOA,EACPK,cAAa,QAAUJ,EAAKE,aAAaH,MACzCF,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASP,GAEX,CACEQ,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASP,GAEX,CACEM,KAAK,sBACLC,QAASL,IAGVQ,OACCX,EAASY,OAAS,EACd,CACEL,KAAK,WACLC,QAASR,EAASa,KAAT,OAEX,IAELF,OAAOZ,KAKhBH,EAAIkB,aAAe,CACjBhB,KAAK,KACLC,KAAM,GACNC,SAAU,GACVH,YAAY,IAWCD,O,kCClGf,iNAuBO,SAASmB,EAAT,GAAkD,IAAD,IAA5BC,aAA4B,MAApB,GAAoB,EAAhBC,EAAgB,EAAhBA,aACtC,OAAOD,EAAMJ,OACX,kBAACM,EAAD,KACGF,EAAMG,KAAI,SAAAC,GACT,OACE,wBAAIC,IAAKD,EAAKE,MAAQF,EAAKG,UACzB,kBAACC,EAAD,CAAcJ,KAAMA,EAAMH,aAAcA,SAK9C,KAbSQ,UAff,SAAmBC,GAAQ,IAAD,IAChBC,EAASD,EAATC,KACFC,EAAYD,SAAH,UAAGA,EAAMzB,YAAT,aAAG,EAAY2B,SACxBb,EAAQW,EAAKX,MAAMc,MACnBb,EAAeU,SAAH,UAAGA,EAAMI,gBAAT,aAAG,EAAgBC,UAErC,OACE,kBAAC,IAAD,CAAQC,SAAUP,EAAMO,SAAUhC,MAAO2B,GACvC,kBAAC,IAAD,CAAK3B,MAAM,WAAWJ,YAAY,KAClC,wBAAIqC,UAAU,iBAAd,gBACA,kBAACnB,EAAD,CAAWC,MAAOA,EAAOC,aAAcA,MAqBtC,IAAMkB,EAAS,aAwChBjB,EAAWkB,IAAOC,GAAV,iEAAGD,CAAH,gPAqBP,SAASZ,EAAT,GAA+C,IAAD,UAAtBJ,EAAsB,EAAtBA,KAAMH,EAAgB,EAAhBA,aAC7BqB,EAASlB,SAAH,UAAGA,EAAMmB,aAAT,iBAAG,EAAaC,uBAAhB,iBAAG,EAA8BC,aAAjC,aAAG,EAAqCH,OAC9CI,EAAgBzB,SAAH,UAAGA,EAAcuB,uBAAjB,iBAAG,EAA+BC,aAAlC,aAAG,EAAsCH,OAC5D,OACE,kBAAC,OAAD,CAAMK,GAAIvB,EAAKE,MAAOD,IAAKD,EAAKG,UAC9B,kBAACqB,EAAD,KACE,yBACEV,UAAU,gBACVW,IAAI,GACJP,OAAQA,GAAUI,EAClBI,IAAI,KAEN,kBAACC,EAAD,CAAQb,UAAU,SAChB,4BAAKd,EAAKnB,QAEZ,8BAAOmB,EAAK4B,MACZ,2BAAI5B,EAAK6B,YAMjB,IAAMF,EAASX,IAAOc,OAAV,+DAAGd,CAAH,iCAINQ,EAAkBR,IAAOe,IAAV,wEAAGf,CAAH","file":"component---src-pages-blog-js-d7beb3ffa46c940e3d91.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport styled from 'styled-components';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n\nfunction BlogIndex(props) {\n  const { data } = props;\n  const siteTitle = data?.site?.siteName;\n  const posts = data.posts.nodes;\n  const defaultImage = data?.defaults?.postImage;\n\n  return (\n    <Layout location={props.location} title={siteTitle}>\n      <SEO title=\"Dev Blog\" description=\"\" />\n      <h1 className=\"section-title\">{`<Dev Blog />`}</h1>\n      <PostsList posts={posts} defaultImage={defaultImage} />\n    </Layout>\n  );\n}\n\nexport default BlogIndex;\n\nexport function PostsList({ posts = [], defaultImage }) {\n  return posts.length ? (\n    <PostList>\n      {posts.map(post => {\n        return (\n          <li key={post.route + post.strapiId}>\n            <PostSynopsis post={post} defaultImage={defaultImage} />\n          </li>\n        );\n      })}\n    </PostList>\n  ) : null;\n}\n\nexport const pageQuery = graphql`\n  query {\n    site: strapiSiteInfo {\n      about\n      email\n      siteName\n    }\n\n    defaults: strapiDefaults {\n      postImage {\n        publicURL\n        childImageSharp {\n          fluid {\n            srcSet\n          }\n        }\n      }\n    }\n\n    posts: allStrapiBlogPosts(sort: { order: DESC, fields: created_at }) {\n      nodes {\n        id\n        strapiId\n        title\n        route\n        synopsis\n        date(formatString: \"MMMM DD, yyyy\")\n        image {\n          publicURL\n          childImageSharp {\n            fluid {\n              srcSet\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst PostList = styled.ul`\n  margin: 0 auto;\n  padding: 0;\n  display: flex;\n  flex-wrap: wrap;\n  display: grid;\n  grid-gap: 20px;\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n\n  @media (min-width: 756px) {\n    grid-gap: 40px;\n    margin: 0 auto;\n  }\n\n  li {\n    list-style: none;\n    margin: 0 auto;\n    padding: 0;\n  }\n`;\n\nexport function PostSynopsis({ post, defaultImage }) {\n  const srcSet = post?.image?.childImageSharp?.fluid?.srcSet;\n  const defaultSrcSet = defaultImage?.childImageSharp?.fluid?.srcSet;\n  return (\n    <Link to={post.route} key={post.strapiId}>\n      <PostCardWrapper>\n        <img\n          className=\"post-car__img\"\n          src=\"\"\n          srcSet={srcSet || defaultSrcSet}\n          alt=\"\"\n        />\n        <Header className=\"major\">\n          <h2>{post.title}</h2>\n        </Header>\n        <time>{post.date}</time>\n        <p>{post.synopsis}</p>\n      </PostCardWrapper>\n    </Link>\n  );\n}\n\nconst Header = styled.header`\n  margin-bottom: 0 !important;\n`;\n\nconst PostCardWrapper = styled.div`\n  width: auto;\n  height: 100%;\n  flex: 1;\n  border-radius: 5px;\n  margin: 0 20px 20px;\n  padding: 20px;\n  transition: transform 500ms;\n\n  @media (min-width: 756px) {\n  }\n\n  &:hover {\n    transform: scale(1.05);\n    box-shadow: 2px 3px 6px black;\n  }\n\n  .post-car__img {\n    object-fit: cover;\n    width: 100%;\n    height: 200px;\n  }\n\n  time {\n    font-size: 14px;\n  }\n`;\n"],"sourceRoot":""}