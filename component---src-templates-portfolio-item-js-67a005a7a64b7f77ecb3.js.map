{"version":3,"sources":["webpack:///./src/components/Hero.js","webpack:///./src/components/TechStack.js","webpack:///./src/utils/db.js","webpack:///./src/components/Carousel.js","webpack:///./src/templates/portfolio-item.js"],"names":["Hero","imgUrl","name","content","defaults","img","postImage","childImageSharp","fluid","src","Section","id","className","styled","section","TechStack","techs","Wrapper","map","i","url","image","TechWrapper","href","key","srcSet","publicURL","getImageAttrs","alt","title","div","a","Carousel","items","indexSelected","React","useState","current","setCurrent","displayBtns","length","LBtn","onClick","Container","RBtn","button","PortfolioPage","data","item","setModal","description","excerpt","screenshots","publicUrl","techStack","color","source","Images","images","selected","getScreenshotAttrs","styles","height","pageQuery","Image","size","formats"],"mappings":"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","file":"component---src-templates-portfolio-item-js-67a005a7a64b7f77ecb3.js","sourcesContent":["import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport styled from 'styled-components';\n\nconst Hero = ({ imgUrl, name, content }) => {\n  const { defaults } = useStaticQuery(graphql`\n    query {\n      defaults: strapiDefaults {\n        postImage {\n          childImageSharp {\n            fluid {\n              src\n              srcSet\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const img = imgUrl || defaults.postImage.childImageSharp.fluid.src;\n  return (\n    <Section imgUrl={img} id=\"banner\" className={`major`}>\n      <div className=\"inner\">\n        <div className=\"banner-wrapper\">\n          <div>\n            <header className=\"major\">\n              <h1>{name}</h1>\n            </header>\n\n            <div className=\"content\">{content}</div>\n          </div>\n        </div>\n      </div>\n    </Section>\n  );\n};\n\nexport default Hero;\n\nconst Section = styled.section`\n  background: url(${({ imgUrl }) => imgUrl}) no-repeat center center fixed;\n  background-size: cover;\n  min-height: auto !important;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { getImageAttrs } from '../utils/db';\n\nexport function TechStack({ techs = [] }) {\n  return (\n    <Wrapper>\n      {techs.map(({ name, url, image }, i) => {\n        return (\n          <TechWrapper href={url} key={i + url}>\n            <img {...getImageAttrs(image)} alt={name} title={name} />\n            <span>{name}</span>\n          </TechWrapper>\n        );\n      })}\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  flex-wrap: wrap;\n  margin-bottom: 30px;\n`;\n\nconst TechWrapper = styled.a`\n  display: flex;\n  flex-direction: column;\n  margin: 15px;\n  img {\n    height: 70px;\n    margin: auto;\n  }\n  span {\n    text-align: center;\n  }\n`;\n","export function getImageAttrs(img = {}) {\n  const srcSet = img?.childImageSharp?.fluid?.srcSet;\n  return {\n    src: srcSet ? '' : img?.publicURL,\n    srcSet,\n  };\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport function Carousel({items, indexSelected = 0}) {\n  const [current, setCurrent] = React.useState(indexSelected);\n  const next = () => current === items.length -1 ? setCurrent(0) : setCurrent(current + 1);\n  const previous = () => current === 0 ? setCurrent(items.length -1) : setCurrent(current - 1);\n  const displayBtns = items.length > 1;\n  return (\n    <Wrapper>\n      {displayBtns && <LBtn onClick={previous}>Prev</LBtn>}\n      <Container>\n      {items[current]}\n      </Container>\n      {displayBtns && <RBtn onClick={next}>Next</RBtn>}\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  position: relative;\n  width: inherit;\n  height: inherit;\n`;\n\nconst Container = styled.div`\n  height: inherit;\n  display: flex;\n  img {\n    max-width: 90%;\n    max-height: 90%;\n    margin: 0 auto;\n    align-self: center;\n  }\n`;\n\nconst LBtn = styled.button`\n  position: absolute;\n  top: 50%;\n  left: 0;\n  transform: translateY(-50%);\n  background-color: white;\n`;\n\nconst RBtn = styled.button`\n  position: absolute;\n  top: 50%;\n  right: 0;\n  transform: translateY(-50%);\n  background-color: white;\n`;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport styled from 'styled-components';\nimport ReactMarkdown from 'react-markdown';\nimport SEO from '../components/seo';\nimport Layout from '../components/layout';\nimport Hero from '../components/Hero';\nimport { TechStack } from '../components/TechStack';\nimport { Carousel } from '../components/Carousel';\n\nfunction PortfolioPage({ data }) {\n  const { item = {} } = data;\n  return (\n    <Layout>\n      {({ setModal }) => (\n        <>\n          <SEO title={`cJaredm - ${item.name}`} description={item.excerpt} />\n\n          <Hero\n            imgUrl={item?.screenshots?.publicUrl}\n            name={item.name}\n            content={item.excerpt}\n          />\n\n          <div id=\"main\" className=\"alt\">\n            <Container id=\"one\">\n              <div className=\"inner\">\n                <header className=\"major\">\n                  <h2>Tech Stack</h2>\n                  {/* {codeLink && <a href={codeLink}>See the code!</a>} */}\n                </header>\n                <TechStack techs={item.techStack} />\n              </div>\n            </Container>\n\n            <Container id=\"two\" color=\"#6fc3df\">\n              <div className=\"inner\">\n                <header className=\"major\">\n                  <h2>What</h2>\n                </header>\n                <ReactMarkdown source={item.description} />\n              </div>\n            </Container>\n\n            {item?.screenshots && (\n              <Container id=\"three\" color=\"#8d82c4\">\n                <div className=\"inner\">\n                  <header className=\"major\">\n                    <h2>Screenshots</h2>\n                  </header>\n\n                  <div className=\"box alt\">\n                    <div className=\"grid-wrapper\">\n                      {item.screenshots.map((img, i) => (\n                        <button\n                          className=\"screenshot-btn\"\n                          onClick={() =>\n                            setModal(\n                              <Images images={item.screenshots} selected={i} />\n                            )\n                          }\n                        >\n                          <img\n                            {...getScreenshotAttrs(img, 'medium')}\n                            alt=\"screenshot\"\n                            key={img.url}\n                          />\n                        </button>\n                      ))}\n\n                      {item.screenshots.map((img, i) => (\n                        <img\n                          key={i}\n                          {...getScreenshotAttrs(img, 'medium')}\n                          alt=\"screenshot\"\n                          styles={{ height: 100 }}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </Container>\n            )}\n          </div>\n        </>\n      )}\n    </Layout>\n  );\n}\n\nexport default PortfolioPage;\n\nexport const pageQuery = graphql`\n  query PortfolioItemByRoute($route: String!) {\n    item: strapiPortfolioItem(route: { eq: $route }) {\n      id\n      strapiId\n      featured\n      name\n      excerpt\n      description\n      techStack {\n        name\n        url\n        image {\n          publicURL\n          childImageSharp {\n            fluid {\n              srcSet\n            }\n          }\n        }\n      }\n      screenshots {\n        url\n      }\n      links {\n        name\n        url\n        iconName\n        image {\n          publicURL\n          childImageSharp {\n            fluid {\n              srcSet\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst Container = styled.section`\n  background-color: ${({ color }) => color || 'white'};\n`;\n\nconst Image = styled.img`\n  display: flex;\n`;\n\nfunction Images({ images, selected }) {\n  return (\n    <Carousel\n      indexSelected={selected}\n      items={images.map((img, i) => (\n        <Image\n          {...getScreenshotAttrs(img, 'large')}\n          alt=\"screenshot\"\n          key={i + img.url}\n        />\n      ))}\n    />\n  );\n}\n\nfunction getScreenshotAttrs(img = {}, size = 'medium') {\n  const srcSet = img?.formats?.[size]?.childImageSharp?.fluid?.srcSet;\n  return {\n    src: srcSet ? '' : img?.url,\n    srcSet,\n  };\n}\n"],"sourceRoot":""}